# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template for migration file names, e.g. "%%(rev)s_%%(slug)s.py"
# file_template = %%(rev)s_%%(slug)s

# sys.path entries, comma separated
#prepend_sys_path = .

# timezone for datetime objects (defaults to None for naive)
#timezone =

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to require revision titles are derived from docstrings
# post_write_hooks =

# Set to 'true' to enable support for branch labels
# Revision filenames may be given operational directives to specify branch labels
# See the documentation for details
# branch_labels = false

# Set to 'true' to indicate that the root revision of the migration history is
# the true root of the schema's development. This affects the behavior of the
# 'branches' command by ensuring that only revisions descended from this root
# are considered as potential branch heads. When set to 'false', the 'branches'
# command may report multiple heads if it detects multiple initial revisions.
# root_revision = <hash value>


# sqlalchemy.url = driver://user:pass@localhost/dbname
# Použijeme proměnnou prostředí, kterou načteme v env.py
sqlalchemy.url = ${DATABASE_URL}

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
